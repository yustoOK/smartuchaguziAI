Metadata for Fraud Detection Dataset
University of Dodoma Web-Based Voting System
Generated on May 09, 2025

Overview
--------
This dataset is synthetically generated to train a machine learning model for detecting fraudulent voting behavior in a web-based voting system for University of Dodoma student elections. It simulates voting activities during a 48-hour election period, where users can cast up to 5 votes, each assumed to be for a different position (e.g., President, Vice President). The dataset contains 1,500,000 samples with a fraud prevalence of 3% (~45,000 fraudulent votes), reflecting realistic scenarios where fraud is rare. The data is stored in `reduced_datasets.csv`.

Purpose
-------
The dataset supports the development of a robust fraud detection model to identify anomalous voting patterns in a university election context, accounting for multiple votes per user. It incorporates realistic features, correlated behaviors, and diverse fraud scenarios to ensure the model generalizes to real-world voting data.

Data Generation Process
----------------------
The dataset is generated using a Python script (`generate_training_data.py`) with the following characteristics:
- Sample Size: 1,500,000 voting records.
- Fraud Ratio: 3% of samples are labeled as fraudulent (`label=1`).
- Election Period: Simulated over a 48-hour window starting May 1, 2025, 8:00 AM.
- Voting Rules: Users can cast 1–5 votes, each assumed to be for a different position. Normal users stay within this limit; fraudulent users may exceed 5 votes or exhibit rapid voting.
- Fraud Scenarios:
  - Bot-driven voting: Rapid votes (>5) with short time gaps (0.01–0.5 seconds).
  - Coordinated attacks: Synced votes (>5) with moderate time gaps (0.5–2 seconds) and multiple logins.
  - Proxy voting: Votes from non-Tanzanian locations, possibly exceeding 5 votes.
- Noise: Variable noise (10–20%) added to numerical features.
- Edge Cases: 5% of samples have randomly flipped `vpn_usage` or `location_flag`.
- Model Format: The trained model is saved in `.keras` format for compatibility with modern TensorFlow workflows.

Features
--------
The dataset contains 8 features after removing redundant or unnecessary ones:

1. time_diff (float, seconds):
   - Time difference between consecutive votes in a session.
   - Normal: 5–15 seconds (time to select a candidate).
   - Fraud: 0.01–5 seconds (rapid voting, especially bots).
   - Noise: 15% Gaussian noise.

2. votes_per_user (integer):
   - Number of votes cast by a user, each assumed to be for a different position.
   - Normal: 1–5.
   - Fraud: 1–15, often >5.
   - Noise: 10% Gaussian noise.

3. vote_frequency (float, votes/second):
   - Frequency of votes.
   - Normal: 0.1–0.3 votes/second.
   - Fraud: 0.5–5.0 votes/second.
   - Noise: 10% Gaussian noise.

4. vpn_usage (binary, 0 or 1):
   - Indicates VPN usage.
   - Normal: 10% chance (0).
   - Fraud: 60% chance (1).
   - Edge Case: 5% random flip.

5. multiple_logins (integer):
   - Number of login sessions.
   - Normal: Typically 1 (single session for all votes).
   - Fraud: 1–5.
   - Noise: 10% Gaussian noise.

6. session_duration (float, seconds):
   - Duration of voting session.
   - Normal: 60–180 seconds (covers multiple votes).
   - Fraud: 10–60 seconds.
   - Noise: 20% Gaussian noise.

7. location_flag (binary, 0 or 1):
   - Indicates non-Tanzanian location.
   - Normal: 5% chance (0).
   - Fraud: 70% chance (1).
   - Edge Case: 5% random flip.

8. label (binary, 0 or 1):
   - 0: Normal vote.
   - 1: Fraudulent vote (3% of samples).

Removed Features
---------------
- voter_id: Unique identifier, not predictive, removed for simplicity.
- avg_time_between_votes: Redundant with vote_frequency (inversely correlated), removed to reduce dimensionality.
- device_id: Non-numeric, not used in training, removed for simplicity.
- ip_address: Non-numeric, not used in training, removed for simplicity.
- vote_timestamp: Non-numeric, not used in training, removed for simplicity.

Important Notes
---------------
- Voting Rules: Users can cast 1–5 votes, each for a different position. Fraud includes exceeding 5 votes or rapid voting.
- Class Imbalance: 3% fraud ratio requires techniques like class weights.
- Realism: Simulates university context with Tanzanian location flags and multiple-vote rules.
- Edge Cases: Random flips ensure challenging cases.

Usage Recommendations
--------------------
1. Preprocessing:
   - Normalize numerical features using StandardScaler.
2. Model Training:
   - Use Neural Networks with class weights to handle imbalance.
   - Save model in `.keras` format.
3. Validation:
   - Check feature distributions.
   - Validate with separate synthetic or real voting logs.

File Details
------------
- File Name: reduced_datasets.csv
- Format: CSV
- Size: 1,500,000 rows
- Location: C:\Users\yusto\Desktop\reduced_datasets.csv
- Model File: fraud_model.keras
- Additional Files: scaler.pkl, features.pkl
- Plot Files: loss_curve.png, accuracy_curve.png, metrics_bar.png, roc_curve.png, confusion_matrix.png

Contact
-------
Contact the University of Dodoma IT department for further details.